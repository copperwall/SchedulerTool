<h4>4 Model Summary</h4>
<p>Schedules themselves are modeled as collections of Sections that have a Course, a set of integers that describe at which hours the section takes place and on what day, an instructor teaching that section, a location at which it takes place, and an integer describing what section to which they are linked, if applicable. The Schedule class also has a number of operations to modify the sections in it.</p>
<p>Instructors have both data as a user and as data for generating a schedule. Instructors have time and course preferences, a number of maximum work time units, a boolean describing whether or not they are active for the term, and a boolean describing whether or not their preferences have been locked by an admin.</p>
<p>Courses have a prefix, a course number, a title, a number of units, a boolean describing if the course has a lab, and an enum describing if the lab must be scheduled directly after, the same day, or on a different day.</p>
<p>Locations have a building number, room number, a boolean describing if it has equipment (which should be expanded on later), a maximum capacity for the room, and a set of booleans describing the hours at which the location is available.</p>
<p>All the data used to generate a schedule, courses, locations, instructors and student votes, are stored in database classes that have collections of those records. Each of the databases have operations to add, edit, or delete records from the respective database.</p>
<p>The different end users are modeled as classes that implement the User interface. Admins have settings that describe scheduling constraints. Instructors have time and course preferences. Students have the votes they've made for each quarter.</p>
<p>Data that will be shown on the GUI is modeled by the classes that extend View. AdminView represents the view of the schedule that the program shows to the admin, and the same applies for StudentView with students and InstructorView with instructors.</p>
<p>The operation that would be particularly difficult to implement is the generate method.</p>